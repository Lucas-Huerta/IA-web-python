class PoetryGenerator {
    constructor() {
        this.isGenerating = false;
        this.initializeEventListeners();
    }

    initializeEventListeners() {
        // Bouton de g√©n√©ration
        const generateBtn = document.getElementById('generateBtn');
        if (generateBtn) {
            generateBtn.addEventListener('click', () => {
                this.generatePoem();
            });
        }

        // Entr√©e sur l'input
        const startWordInput = document.getElementById('startWord');
        if (startWordInput) {
            startWordInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.generatePoem();
                }
            });
        }
    }

    async generatePoem() {
        if (this.isGenerating) return;

        const startWordInput = document.getElementById('startWord');
        if (!startWordInput) {
            console.error('Element startWord non trouv√©');
            return;
        }

        const startWord = startWordInput.value.trim();
        
        if (!startWord) {
            alert('Veuillez entrer un mot pour commencer le po√®me');
            return;
        }

        this.isGenerating = true;
        this.showLoading();
        
        try {
            // Appeler l'API du mod√®le PyTorch
            const response = await this.callPoetryAPI(startWord);
            if (response.success) {
                this.displayPoem(response.poem);
            } else {
                throw new Error(response.error);
            }
            
        } catch (error) {
            console.error('Erreur g√©n√©ration:', error);
            // Fallback vers simulation
            this.simulatePoem(startWord);
        } finally {
            this.hideLoading();
            this.isGenerating = false;
        }
    }

    async callPoetryAPI(startWord) {
        const response = await fetch('http://localhost:5000/api/generate-poem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                start_word: startWord,
                length: 200,
                temperature: 0.8
            })
        });

        if (!response.ok) {
            throw new Error('Erreur API');
        }

        return await response.json();
    }

    simulatePoem(startWord) {
        // Simulation de fallback
        const poemTemplates = {
            'amour': `${startWord}, sentiment profond qui traverse les √¢ges,
comme une m√©lodie douce dans le c≈ìur sauvage.
les mots dansent et s'entrelacent,
cr√©ant des vers o√π l'√©motion se trace.

dans le silence de la nuit √©toil√©e,
les r√™ves prennent leur envol ail√©.
chaque syllabe porte en elle
la beaut√© d'une vie nouvelle.`,

            'nature': `${startWord}, m√®re nourrici√®re aux mille visages,
tes for√™ts murmurent d'anciens messages.
les rivi√®res chantent leur course √©ternelle,
portant l'espoir d'une terre nouvelle.

sous tes arbres aux branches √©tendues,
l'√¢me humaine trouve ses v√©rit√©s perdues.
chaque feuille qui danse dans le vent
raconte l'histoire du temps.`,

            'r√™ve': `${startWord} dor√© aux couleurs de l'infini,
tu portes l'espoir d'un monde b√©ni.
dans les m√©andres de la nuit profonde,
tu tisses des histoires vagabondes.

tes images flottent comme des nuages,
peignant dans l'√¢me de doux paysages.
entre r√©el et imaginaire,
tu r√©v√®les l'extraordinaire.`
        };

        const selectedTemplate = poemTemplates[startWord.toLowerCase()] || 
                                 this.generateDefaultPoem(startWord);
        
        setTimeout(() => {
            this.displayPoem(selectedTemplate);
            this.hideLoading();
            this.isGenerating = false;
        }, 2000);
    }

    generateDefaultPoem(word) {
        return `${word}, mot myst√©rieux qui √©veille l'imaginaire,
comme une cl√© ouvrant les portes de l'ordinaire.
dans le jardin secret des mots choisis,
na√Æt un po√®me aux couleurs infinies.

les vers s'√©chappent tel un fleuve de pens√©es,
cr√©ant des images aux reflets nacr√©s.
entre les lignes se cache la magie
d'une √¢me qui r√™ve et qui s'√©panouit.

${word}, tu inspires le po√®te,
guidant sa plume vers des contr√©es secr√®tes.
dans chaque syllabe r√©sonne
l'√©cho d'une m√©lodie qui frissonne.`;
    }

    displayPoem(poem) {
        const outputDiv = document.getElementById('poemOutput');
        if (!outputDiv) {
            console.error('Element poemOutput non trouv√©');
            return;
        }

        outputDiv.innerHTML = poem;
        outputDiv.classList.add('has-content');
        
        // Animation d'apparition
        outputDiv.style.opacity = '0';
        setTimeout(() => {
            outputDiv.style.transition = 'opacity 0.8s ease-in-out';
            outputDiv.style.opacity = '1';
        }, 100);
    }

    showLoading() {
        const button = document.getElementById('generateBtn');
        if (button) {
            button.innerHTML = '<span class="loading"></span>G√©n√©ration en cours...';
            button.disabled = true;
        }
        
        const outputDiv = document.getElementById('poemOutput');
        if (outputDiv) {
            outputDiv.innerHTML = '<p class="placeholder">Cr√©ation de votre po√®me...</p>';
            outputDiv.classList.remove('has-content');
        }
    }

    hideLoading() {
        const button = document.getElementById('generateBtn');
        if (button) {
            button.innerHTML = 'G√©n√©rer un Po√®me';
            button.disabled = false;
        }
    }
}

// Initialiser l'application quand le DOM est charg√©
document.addEventListener('DOMContentLoaded', () => {
    console.log('üé≠ G√©n√©rateur de Po√®mes initialis√©');
    new PoetryGenerator();
    
    // Ajouter suggestions de mots
    const input = document.getElementById('startWord');
    if (input) {
        const wordSuggestions = [
            'amour', 'nature', 'r√™ve', 'espoir', 'libert√©', 
            'oc√©an', '√©toile', 'bonheur', 'm√©lancolie', 'voyage'
        ];
        
        input.addEventListener('focus', () => {
            if (!input.value) {
                const randomWord = wordSuggestions[Math.floor(Math.random() * wordSuggestions.length)];
                input.placeholder = `Ex: ${randomWord}`;
            }
        });
    }
});